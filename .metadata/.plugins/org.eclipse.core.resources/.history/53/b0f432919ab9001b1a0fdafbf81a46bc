package com.qlks_hdv.service.impl;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.qlks_hdv.entity.Roles;
import com.qlks_hdv.entity.User;
import com.qlks_hdv.exception.ConflictException;
import com.qlks_hdv.exception.NotFoundException;
import com.qlks_hdv.mapper.UserMapper;
import com.qlks_hdv.repository.RoleRepository;
import com.qlks_hdv.repository.UserRepository;
import com.qlks_hdv.request.CreateUserRequest;
import com.qlks_hdv.request.UpdateUserRequest;
import com.qlks_hdv.service.IUserService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserService implements IUserService {

  @Autowired
  private UserRepository userRepository;	

  private final RoleRepository roleRepository;


  private final UserMapper userMapper;


  @Override
  @Transactional
  public void createUser(CreateUserRequest createUserRequest) {
    if (userRepository.existsByUsername(createUserRequest.getUsername())) {
      throw new ConflictException("username-already-exist");
    }
    Roles roles = roleRepository.findOneByRoleName(createUserRequest.getRoleName())
        .orElseThrow(() -> new NotFoundException("role-not found"));

    User user = userMapper.mapToUser(createUserRequest, roles);
    userRepository.save(user);
  }

  @Override
  @Transactional
  public void updateUser(UpdateUserRequest updateUserRequest, String username) {
    User user = userRepository.findByUsername(username)
        .orElseThrow(() -> new NotFoundException("user-not-found"));
    user = userMapper.mapToUser(updateUserRequest, user);
    userRepository.save(user);
  }

  @Override
  @Transactional
  public void deleteUser(String username) {

    if (!userRepository.existsByUsername(username)) {
      throw new NotFoundException("user-not-found");
    }
   // userRepository.deleteById(username);

  }
}
